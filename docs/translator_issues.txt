L-ASP TRANSLATOR: ISSUES


Distribution
    Making the L solver an Eclipse plug-in fragment to integrate with the L editor.

Errors:
    Arithmetic set constructs

    #rule_gterms:
        From L rules, the translator grounds then collects terms 
        to define the ASP sort #rule_gterms. 
        But the translator misses variables (which are possibly subterms of
        functional terms).
        Example:
            L:
                p(0). /* Term "0" will be collected to #rule_gterms */
                
                type t = {1, 2}.
                q(t V, V + 10). /* Term "V + 10" == {11, 12} will be missed */
            ASP:
                sorts
                #t = {1, 2}.
                #rule_gterms = {0}. % Missed {11, 12}
                #universal = #t + #rule_gterms.
                
                predicates
                p(#universal).
                q(#universal, #universal).
                
                rules
                p(0).
                q(V, V + 10) :- #t(V).
        
########## ########## ########## ########## ########## ########## ########## ##########

Sparc-related matters:
    Empty types:
        Empty sorts are currently unsupported in Sparc. 
        Tricky to translate L programs with empty types into 
        ASP programs without empty sorts.
    Negative integers:
        Terms that represent negative integers are currently unsupported in Sparc.
        
Notes:
    Closed-World Assumption:
        CWA for each predicate. May change.
    Negation:
        L negation is ASP strong negation.
        
        Currently forbid negation of:
            Sentences: not p / p and q / p or q
            Quantified atoms: p(every t) / q(some t)
        
Improvements:
    Selective grounding:
        L quantified terms [every/some typeName] are transformed into ASP ground terms.
        But L universally/existentially quantified terms in heads/sentences should 
        be transformed into ASP variables, which are quantified implicitly. 
        Doing so will reduce the needed time and space, especially when 
        putting transformed rules in conjunctive/disjunctive normal form.
