L-ASP TRANSLATOR ARCHITECTURE

1. DESCRIPTION

Given an L program, the translator produces a semantically equivalent ASP program.

The translator contains six modules: parser, adjuster, transformer, extractor, linker, and unparser. The control flow is:

                               | -> transformer -> |
input -> parser -> adjuster -> |                   | -> linker -> unparser -> output
                               | -> extractor   -> |
                                
2. MODULES

2.1. PARSER

This module parses an L program. The output is a list of parsed L statements. Each such statement represents either an L constant declaration, type declaration, or rule.

2.2. ADJUSTER

The parser produces input for the adjuster. When given a parsed L program, the adjuster puts the program's statements in three groups: constant declarations, type declarations, and rules.

An adjusted L program contains explicit and implicit information, which will be separately handled by the transformer and extractor as described below.

2.3. TRANSFORMER

Given an adjusted L program, the transformer does the explicit conversion: from L constant declarations to ASP constant declarations, from L type declarations to ASP sort definitions, and from L rules to ASP rules. The output is an incomplete parsed ASP program, missing implicit information, which will be obtained by the extractor.

2.4. EXTRACTOR

From the rules of an adjusted L program, the extractor collects implicit information: the ground terms and the predicates with their arities. We need this information to define sorts and declare predicates as required in ASP.

2.5. LINKER

From an adjusted L program, the linker outputs a complete ASP parsed program.

Recall that the transformer produces an incomplete ASP parsed program while the extractor provides implicit information from the adjusted L program. Using the transformer and extractor as submodules, the linker appends the extracted implicit information to the incomplete parsed ASP program. The result is a complete ASP parsed program.

2.6. UNPARSER

With a complete ASP parsed program from the linker, the unparser produces the corresponding ASP program.
