from labels import *

from main import *
from transformer import *
from rewriter import *
from reassembler import *
from unparser import *

# Provide a parsed L program:
parsed = \
       [['tdecl', ('identifier', 'pass_fail_grade'), ['set', ['gterms', ['const', ('identifier', 'pass')], ['const', ('identifier', 'fail')]]]], ['tdecl', ('identifier', 'letter_grade'), ['set', ['gterms', ['const', ('identifier', 'a')], ['const', ('identifier', 'b')], ['const', ('identifier', 'c')], ['const', ('identifier', 'd')], ['const', ('identifier', 'f')]]]], ['tdecl', ('identifier', 'grade'), ['union', ('identifier', 'letter_grade'), ('identifier', 'pass_fail_grade')]], ['tdecl', ('identifier', 'acceptable_grade'), ['set', ['gterms', ['const', ('identifier', 'pass')], ['const', ('identifier', 'a')], ['const', ('identifier', 'b')], ['const', ('identifier','c')], ['const', ('identifier', 'd')]]]], ['tdecl', ('identifier', 'unacceptable_grade'), ['diff', ('identifier', 'grade'), ('identifier', 'acceptable_grade')]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_an_unacceptable_assessment'), ['terms', ['bt', ['tvar', ('identifier', 'student'), ('variable', 'S')]]]]]]], ['sent', ['unit', ['literal', ['patom',('identifier', 'has_score'), ['terms', ['bt', ['var', ('variable', 'S')]], ['bt', ['tvar', ('identifier', 'assessment'), ('variable', 'A')]], ['bt', ['tvar', ('identifier', 'unacceptable_grade'), ('variable', 'G')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_all_acceptable_assessments'), ['terms', ['bt', ['tvar', ('identifier', 'student'), ('variable', 'S')]]]]]]], ['sent', ['unit', ['neg_literal', ['patom', ('identifier', 'has_an_unacceptable_assessment'), ['terms', ['bt', ['var', ('variable', 'S')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_an_excellent_exam'), ['terms', ['bt', ['tvar', ('identifier', 'student'), ('variable', 'S')]]]]]]], ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['var', ('variable', 'S')]], ['bt', ['tvar', ('identifier', 'exam'), ('variable', 'E')]], ['bt', ['const', ('identifier', 'a')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_a_good_exam'), ['terms', ['bt', ['tvar', ('identifier', 'student'), ('variable', 'S')]]]]]]], ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['var', ('variable', 'S')]], ['bt', ['tvar', ('identifier', 'exam'), ('variable', 'E')]], ['bt', ['const', ('identifier', 'b')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'ranked'), ['terms', ['bt', ['tvar', ('identifier', 'student'), ('variable', 'S')]], ['bt', ['const', ('identifier', 'above_average')]]]]]]], ['sent', ['conj', ['unit', ['literal', ['patom', ('identifier', 'has_all_acceptable_assessments'), ['terms', ['bt', ['var', ('variable', 'S')]]]]]], ['literal', ['patom', ('identifier', 'has_an_excellent_exam'), ['terms', ['bt', ['var', ('variable', 'S')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'ranked'), ['terms', ['bt', ['tvar', ('identifier', 'student'), ('variable', 'S')]], ['bt', ['const', ('identifier', 'average')]]]]]]], ['sent', ['conj', ['conj', ['unit', ['literal', ['patom', ('identifier', 'has_all_acceptable_assessments'), ['terms', ['bt', ['var', ('variable', 'S')]]]]]], ['neg_literal', ['patom', ('identifier', 'has_an_excellent_exam'), ['terms', ['bt', ['var', ('variable', 'S')]]]]]], ['literal',['patom', ('identifier', 'has_a_good_exam'), ['terms', ['bt', ['var', ('variable', 'S')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'ranked'), ['terms', ['bt', ['tvar', ('identifier', 'student'), ('variable', 'S')]], ['bt', ['const', ('identifier', 'below_average')]]]]]]], ['sent', ['conj', ['unit', ['literal', ['patom', ('identifier', 'has_an_unacceptable_assessment'), ['terms', ['bt', ['var', ('variable', 'S')]]]]]], ['literal', ['patom', ('identifier', 'has_a_good_exam'), ['terms', ['bt', ['var', ('variable', 'S')]]]]]]]], ['tdecl', ('identifier', 'satisfactory_rank'), ['set', ['gterms', ['const', ('identifier', 'above_average')], ['const', ('identifier', 'average')], ['const', ('identifier', 'below_average')]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'evaluated'), ['terms', ['bt', ['tvar', ('identifier', 'student'), ('variable', 'S')]], ['bt', ['const', ('identifier', 'satisfactory')]]]]]]], ['sent', ['unit', ['literal', ['patom', ('identifier', 'ranked'), ['terms', ['bt', ['var', ('variable', 'S')]], ['bt', ['tvar', ('identifier', 'satisfactory_rank'), ('variable', 'R')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'evaluated'), ['terms', ['bt', ['tvar', ('identifier', 'student'), ('variable', 'S')]], ['bt', ['const', ('identifier', 'unsatisfactory')]]]]]]], ['sent', ['unit', ['neg_literal', ['patom', ('identifier','evaluated'), ['terms', ['bt', ['var', ('variable', 'S')]], ['bt', ['const', ('identifier', 'satisfactory')]]]]]]]], ['tdecl', ('identifier', 'student'), ['set', ['gterms', ['const', ('identifier', 'ann')], ['const', ('identifier', 'bob')], ['const', ('identifier', 'chris')], ['const', ('identifier', 'dennis')]]]], ['tdecl', ('identifier', 'quiz'), ['set', ['gterms', ['const',('identifier', 'q1')], ['const', ('identifier', 'q2')], ['const', ('identifier', 'q3')]]]], ['tdecl', ('identifier', 'exam'), ['set', ['gterms', ['const', ('identifier', 'e1')], ['const', ('identifier', 'e2')]]]], ['tdecl', ('identifier', 'assessment'), ['union', ('identifier', 'quiz'), ('identifier', 'exam')]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'ann')]], ['bt', ['const', ('identifier', 'q1')]], ['bt', ['const', ('identifier', 'pass')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'ann')]], ['bt', ['const', ('identifier', 'q2')]], ['bt', ['const', ('identifier', 'pass')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'ann')]], ['bt', ['const', ('identifier', 'q3')]], ['bt', ['const', ('identifier', 'pass')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'ann')]], ['bt', ['const', ('identifier', 'e1')]], ['bt', ['const', ('identifier', 'a')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'ann')]], ['bt', ['const', ('identifier', 'e2')]], ['bt', ['const', ('identifier', 'b')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'bob')]], ['bt', ['const', ('identifier', 'q1')]], ['bt', ['const', ('identifier', 'pass')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'bob')]], ['bt', ['const', ('identifier', 'q2')]], ['bt', ['const', ('identifier', 'pass')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'bob')]], ['bt', ['const',('identifier', 'q3')]], ['bt', ['const', ('identifier', 'pass')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'bob')]], ['bt', ['const', ('identifier', 'e1')]], ['bt', ['const', ('identifier', 'b')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'bob')]], ['bt', ['const', ('identifier', 'e2')]], ['bt', ['const', ('identifier', 'b')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'chris')]], ['bt', ['const', ('identifier', 'q1')]], ['bt', ['const', ('identifier', 'fail')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'chris')]], ['bt', ['const', ('identifier', 'q1')]], ['bt', ['const', ('identifier', 'pass')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'chris')]], ['bt', ['const', ('identifier', 'q1')]], ['bt', ['const', ('identifier', 'pass')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'chris')]], ['bt', ['const', ('identifier', 'e1')]], ['bt', ['const', ('identifier', 'b')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'chris')]], ['bt', ['const', ('identifier', 'e2')]], ['bt', ['const', ('identifier', 'd')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'dennis')]], ['bt', ['const', ('identifier', 'q1')]], ['bt', ['const', ('identifier', 'pass')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'dennis')]], ['bt', ['const', ('identifier', 'q2')]], ['bt', ['const', ('identifier', 'pass')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'dennis')]], ['bt', ['const', ('identifier', 'q3')]], ['bt', ['const', ('identifier', 'pass')]]]]]]]],['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt',['const', ('identifier', 'dennis')]], ['bt', ['const', ('identifier', 'e1')]], ['bt', ['const', ('identifier', 'f')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'has_score'), ['terms', ['bt', ['const', ('identifier', 'dennis')]], ['bt', ['const', ('identifier', 'e2')]], ['bt', ['const', ('identifier', 'c')]]]]]]]]]

# Assign values to nodes in the control flow:
def assign():
    global translated # is an ASP program
    global transformed # is a parsed ASP program
    global rewritten # is an incomplete dictionary parsed ASP program
    global reassembled # is a dictionary parsed ASP program
    translated = translate(parsed)
    transformed = transform(parsed)
    rewritten = rewrite(list_to_dict(parsed))
    reassembled = reassemble(rewritten)

########## ########## ########## ########## ########## ########## ########## ##########

assign()

print(translated)

# Write the ASP program to the file named file_translated:
file_translated = open('file_translated', 'w')
file_translated.write(translated)
file_translated.close()
