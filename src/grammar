program(S) ::= statements(S)
statements(stmts S) ::= statement(S)
statements(stmts S cut_root(Ss)) ::= statement(S) statements(Ss)

statement(C) ::= const_decl(C)
statement(T) ::= type_decl(T)
statement(R) ::= rule(R)

calculatable_expr(C) ::= const_name(C)
calculatable_expr(N) ::= number(N)
calculatable_expr(A) ::= ground_arithmetic_term(A)

number(num N) ::= num(N)
num(N) ::= numeral(N)

const_name(cname C) ::= id(C)
type_name(tname T) ::= id(T)
pred_name(pname P) ::= id(P)
func_name(fname F) ::= id(F)

var(var V) ::= variable(V)
tvar(tvar T V) ::= type_name(T) var(V)

const_decl(cdecl N E) ::= const const_name(N) eq calculatable_expr(E) dot

type_decl(tdecl I E) ::= type type_name(I) eq set_expr(E) dot
set_expr(S) ::= ST0(S)
ST0(S) ::= ST1(S)
ST0(union S1 S2) ::= ST0(S1) plus ST1(S2)
ST1(S) ::= ST2(S)
ST1(inters S1 S2) ::= ST1(S1) mult ST2(S2)
ST1(diff S1 S2) ::= ST1(S1) backslash ST2(S2)
ST2(S) ::= lparen ST0(S) rparen

ST2(I) ::= type_name(I)
ST2(S) ::= set(S)
ST2(R) ::= range(R)
ST2(C) ::= set_constr(C)

set(set Ts) ::= lcurparen ground_terms(Ts) rcurparen

range(range L R) ::= lcurparen limit(L) dot dot limit(R) rcurparen
limit(E) ::= calculatable_expr(E)

set_constr(sconstr T Vs) ::= basic_term(T) where varts(Vs)
varts(varts V) ::= vart(V)
varts(varts V cut_root(Vs)) ::= vart(V) comma varts(Vs)
vart(vart V T) ::= var(V) in type_name(T)

rule(fact H) ::= head(H) dot
rule(fullRule H S) ::= head(H) if sentence(S) dot

head(H) ::= maybe_lit(H)
head(H) ::= card_constr(H)
head(S) ::= p_sentence(S)

maybe_lit(mlit A) ::= maybe basic_predicate_atom(A)

card_constr(cconstr L A R) ::= bound(L) lessoreq bar lcurparen basic_predicate_atom(A) rcurparen bar lessoreq bound(R)
bound(E) ::= calculatable_expr(E)

and_s(and) ::= comma(A)
and_s(and) ::= and(A)

p_s0(A) ::= predicate_atom(A)
p_s0(strNeg A) ::= not basic_predicate_atom(A)
p_s1(A) ::= p_s0(A)
p_s1(S) ::= lparen p_s3(S) rparen
p_s2(L) ::= p_s1(L)
p_s2(conj L1 L2) ::= p_s2(L1) and_s p_s1(L2)
p_s3(T) ::= p_s2(T)
p_s3(disj T1 T2) ::= p_s3(T1) or p_s2(T2)
p_sentence(psent S) ::= p_s3(S)

s0(A) ::= atom(A)
s0(strNeg A) ::= not basic_atom(A)
s1(A) ::= s0(A)
s1(S) ::= lparen s3(S) rparen
s2(L) ::= s1(L)
s2(conj L1 L2) ::= s2(L1) and_s s1(L2)
s3(T) ::= s2(T)
s3(disj T1 T2) ::= s3(T1) or s2(T2)
sentence(sent S) ::= s3(S)

atom(P) ::= predicate_atom(P)
atom(B) ::= built_in_atom(B)
basic_atom(P) ::= basic_predicate_atom(P)
basic_atom(B) ::= built_in_atom(B)

predicate_atom(patom I) ::= pred_name(I)
predicate_atom(patom I Ts) ::= pred_name(I) lparen terms(Ts) rparen
basic_predicate_atom(patom I) ::= pred_name(I)
basic_predicate_atom(patom I Ts) ::= pred_name(I) lparen basic_terms(Ts) rparen

built_in_atom(batom T1 O T2) ::= basic_term(T1) compOp(O) basic_term(T2)
compOp(O) ::= less(O)
compOp(O) ::= greater(O)
compOp(O) ::= lessoreq(O)
compOp(O) ::= greateroreq(O)
compOp(O) ::= noteq(O)
compOp(O) ::= eq(O)

terms(terms T) ::= term(T)
terms(terms T cut_root(Ts)) ::= term(T) comma terms(Ts)
basic_terms(terms T) ::= basic_term(T)
basic_terms(terms T cut_root(Ts)) ::= basic_term(T) comma basic_terms(Ts)
ground_terms(terms T) ::= ground_term(T)
ground_terms(terms T cut_root(Ts)) ::= ground_term(T) comma ground_terms(Ts)

term(T) ::= quantified_term(T)
term(F) ::= functional_term(F)
term(T) ::= basic_term(T)

quantified_term(qt Q I) ::= quantifier(Q) type_name(I)

quantifier(E) ::= every(E)
quantifier(A) ::= some(A)

functional_term(func I Args) ::= func_name(I) lparen terms(Args) rparen
basic_functional_term(func I Args) ::= func_name(I) lparen basic_terms(Args) rparen
ground_functional_term(func I Args) ::= func_name(I) lparen ground_terms(Args) rparen

basic_term(F) ::= basic_functional_term(F)
basic_term(T) ::= arithmetic_term(T)
basic_term(N) ::= number(N)
basic_term(C) ::= const_name(C)
basic_term(V) ::= var(V)
basic_term(T) ::= tvar(T)

ground_term(F) ::= ground_functional_term(F)
ground_term(E) ::= calculatable_expr(E)

arithmetic_term(ar T1 I T2) ::= lparen ar0(T1) arOp1(I) ar1(T2) rparen
arithmetic_term(ar T1 I T2) ::= lparen ar1(T1) arOp2(I) ar2(T2) rparen
arithmetic_term(ar T1 I T2) ::= ar0(T1) arOp1(I) ar1(T2)
arithmetic_term(ar T1 I T2) ::= ar1(T1) arOp2(I) ar2(T2)

ground_arithmetic_term(ar T1 I T2) ::= lparen g_ar0(T1) arOp1(I) g_ar1(T2) rparen
ground_arithmetic_term(ar T1 I T2) ::= lparen g_ar1(T1) arOp2(I) g_ar2(T2) rparen
ground_arithmetic_term(ar T1 I T2) ::= g_ar0(T1) arOp1(I) g_ar1(T2)
ground_arithmetic_term(ar T1 I T2) ::= g_ar1(T1) arOp2(I) g_ar2(T2)

ar0(T) ::= ar1(T)
ar0(sum T1 I T2) ::= ar0(T1) arOp1(I) ar1(T2)
ar1(T) ::= ar2(T)
ar1(prod T1 I T2) ::= ar1(T1) arOp2(I) ar2(T2)
ar2(T) ::= lparen ar0(T) rparen

ar2(I) ::= const_name(I)
ar2(N) ::= number(N)
ar2(V) ::= var(V)
ar2(T) ::= tvar(T)

g_ar0(T) ::= g_ar1(T)
g_ar0(sum T1 I T2) ::= g_ar0(T1) arOp1(I) g_ar1(T2)
g_ar1(T) ::= g_ar2(T)
g_ar1(prod T1 I T2) ::= g_ar1(T1) arOp2(I) g_ar2(T2)
g_ar2(T) ::= lparen g_ar0(T) rparen

g_ar2(I) ::= const_name(I)
g_ar2(N) ::= number(N)

arOp1(P) ::= plus(P)
arOp1(M) ::= minus(M)
arOp2(M) ::= mult(M)
arOp2(D) ::= div(D)
arOp2(M) ::= mod(M)
