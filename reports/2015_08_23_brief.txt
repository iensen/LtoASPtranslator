L-ASP TRANSLATOR: 08/22 BRIEF REPORT

Notes:

    Please use a text viewer which supports optional word wrap
    
    This GitHub repository can be downloaded:
        https://github.com/iensen/LtoASPtranslator/archive/master.zip
    It can also be cloned in desktop:
        https://github.com/iensen/LtoASPtranslator
    
    
Currently, we can only translate into ASP an L program in which:

    (1)
        Integers are nonnegative.
    
    (2)
        Terms are constant.
        
    (3)
        A set expression is either:
        
            (a)
                A nonempty set, such as: {a, 2, f(0)}
            
            or
            (b)
                A type name, such as: type1
                
            or
            (c)
                A union/intersection/difference of set expressions
    
    (4)
        Rules are already in ASP-form, such as:
            p1 or p2(2) if p3(a, b) and not p4(c, d, f(0)).
            
            
Also, these L features are not supported yet:

    (1)
        A functional term which has a functional proper subterm
        
    (2)
        Arithmetic terms (+, -, *, /, %)
        
        
The translator spec is translator_docs/spec.txt
        
An example is in src/examples/: the two ground_functional_terms files

The testing file is src/translator/test.py
        
To use the modules (src/translator/):
    
    (1)
        Assign a parsed L program to T. For instance:
            T = 
                [['tdecl', ('identifier', 't1'), ['set', ['gterms', ['num', ['pos', ('numeral', '1')]]]]], ['tdecl', ('identifier', 't2'), ['set', ['gterms', ['const', ('identifier', 'a')], ['const', ('identifier', 'b')]]]], ['tdecl', ('identifier', 't3'), ['set', ['gterms', ['const', ('identifier','a')], ['const', ('identifier', 'b')], ['func', ('identifier', 'f1'), ['gterms', ['const', ('identifier', 'c')]]]]]], ['tdecl', ('identifier', 't4'), ['set', ['gterms', ['func', ('identifier', 'f2'), ['gterms', ['num', ['pos', ('numeral', '1')]], ['const', ('identifier', 'b')]]], ['num', ['pos', ('numeral', '2')]], ['func', ('identifier', 'f3'), ['gterms', ['const', ('identifier', 'a')], ['const', ('identifier', 'b')], ['num', ['pos', ('numeral', '3')]]]], ['const', ('identifier', 'd')]]]], ['tdecl', ('identifier', 't5'), ['union', ('identifier', 't1'), ['diff', ['inters', ('identifier', 't2'), ('identifier', 't3')], ['set', ['gterms', ['const', ('identifier', 'a')], ['num', ['pos', ('numeral', '5')]]]]]]], ['tdecl', ('identifier', 't6'), ['diff', ['set', ['gterms', ['func', ('identifier', 'f3'), ['gterms', ['const', ('identifier', 'a')], ['const', ('identifier', 'b')], ['const', ('identifier', 'c')]]], ['const', ('identifier', 'a')]]], ('identifier', 't2')]], ['tdecl', ('identifier', 't7'), ('identifier', 't3')], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'p0')]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'p1'), ['terms', ['bt', ['func', ('identifier', 'f1'), ['terms',['bt', ['num', ['pos', ('numeral', '1')]]]]]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'p2'), ['terms', ['bt', ['const', ('identifier', 'a')]], ['bt', ['const', ('identifier', 'b')]]]]]]]], ['rule', ['sent', ['unit', ['literal', ['patom', ('identifier', 'p3'), ['terms', ['bt', ['num', ['pos', ('numeral', '1')]]], ['bt', ['const', ('identifier', 'b')]], ['bt', ['func', ('identifier', 'f2'), ['terms', ['bt', ['const', ('identifier', 'a')]], ['bt', ['num', ['pos', ('numeral', '3')]]]]]]]]]]]], ['rule', ['sent', ['disj', ['disj', ['unit', ['literal', ['patom', ('identifier', 'p4')]]], ['unit', ['literal', ['patom', ('identifier', 'p5'), ['terms', ['bt', ['func', ('identifier', 'f1'), ['terms', ['bt', ['num', ['pos', ('numeral', '2')]]]]]], ['bt', ['const', ('identifier', 'b')]]]]]]], ['unit', ['literal', ['patom', ('identifier', 'p6'), ['terms', ['bt', ['const', ('identifier', 'a')]], ['bt', ['func', ('identifier', 'f2'), ['terms', ['bt', ['const', ('identifier', 'a')]], ['bt', ['num', ['pos', ('numeral', '3')]]]]]]]]]]]], ['sent', ['conj', ['conj', ['unit', ['literal', ['patom', ('identifier', 'p7'), ['terms', ['bt', ['func', ('identifier', 'f3'), ['terms', ['bt', ['const', ('identifier','a')]], ['bt', ['const', ('identifier', 'b')]], ['bt', ['const', ('identifier', 'd')]]]]]]]]],['literal', ['patom', ('identifier', 'p8'), ['terms', ['bt', ['num', ['pos', ('numeral', '1')]]]]]]], ['neg_literal', ['patom', ('identifier', 'p9')]]]]]]
    
    (2)
        To produce a parsed ASP program:
            transformer.transform(T)
            
    (3)
        To write an ASP program:
            main.translate(T)
