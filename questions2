Dr.Rusthon,


I looked at the model sent to me by Dr.Watson.

I looked at the first 300 (out of 500) lines of the program and tried to translate them into L.
I cannot guarantee my translation is correct, because I do not fully understand the semantics of L.

The main question is how to understand variables. Suppose I have a rule 

p(X) if not q(X) 

in L. 

What is the semantics of it? Is it a shorthand for some collection of rules without variables? 
If so, where should we get the constants to replace the variables? How exactly the so called 'universe' is defined in L?
ASP solvers(clingo, DLV) do not accept this rule: p(X):- not q(X), because it is not always possible to have a finite collection of constants X may take. However our sorted ASP (the model is written on)  accepts it, because it derives a finite collection of possible values for X from the sorts definitions. What about L?


Anyway, assuming I have guessed the semantics correctly, here are my conclusions:



I.
For some rules, the readability has improved (mainly because of the quantifier 'any').
Here are few interesting cases, (all other ones are similar):


v_hop(every node).

/*ASP RULE: frame_sent(N1,N2) :- sent_to(N1,N2,D).

*/

/*L RULES:*/
 frame_sent(N1, N2) if sent_to(N1,N2, any data).

II.

For some rules, the readabilty could have been improved, assuming we somehow change the syntax of L.
Consider, for example, the following rule (it is not from the program, but the program has many similar rules):

g:- q(X), p(X).

The english reading is: if for some X p(X) and q(X) are true, then g is true.
We cannot use current L quantifiers to write this statement.


III.
For some rules I could not find a translation (at least, the translation which translates an ASP rule into exactly one L rule).
This is because L does not support some things ASP supports, such as :
-arithmetic relations  and operators, 
-relations between terms (=,!=), 
-choice rules, 
-epistemic disjunction, 
-constraints). 
See all the examples in the file.

While constraings can be easility written in L by introducing an auxiliary predicate with 2 rules, I cannot see how can we model
choice rules and epistemic disjunction in L.










